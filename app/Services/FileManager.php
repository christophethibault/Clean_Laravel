<?php

namespace App\Services;

use App\Document;
use Debugbar;
use Config;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Storage;


class FileManager
{

	const ERR_INVALID_FILE = -1;
	const ERR_FILE_NULL = -2;


	/* Application parameter : FileSystem.php */
	private $storageStrategy;

	/* Default Uploads folder : for future usage */
	const defaultFolder = 'uploads';

	function __construct()
	{
		$this->storageStrategy = Config::get('filesystems.default');
	}

	/**
	 *
	 * Save uploaded file on the default disk
	 *
	 * @param UploadedFile $file
	 * @return array|string|integer
	 *
	 */

	public function save(UploadedFile $file)
	{
		if ($file == null) {
			Log::error("FileManager : File Object is null.");
			return self::ERR_FILE_NULL;
		}

		if (!$file->isValid()) {
			Log::error("FileManager : Giving file is invalid.");
			return self::ERR_INVALID_FILE;
		}

		// Original file name
		$filename = $file->getClientOriginalName();
		// File extension
		$extension = $file->getClientOriginalExtension();
		//Storage name will be generated by laravel storage system
		$storageName = null;

		$path = $file->store(self::defaultFolder);

		// Store file using default storage system

		$storageName = explode('/', $path);

		// Return file information
		return [
			'name'        => $filename,
			'storageName' => end($storageName),
			'extension'   => $extension,
			'path'        => $path
		];
	}


	/**
	 * Get file with giving path
	 *
	 * @param $filePath
	 *
	 *
	 * @return \Illuminate\Contracts\Translation\Translator|string
	 */

	public function get($filePath)
	{
		$file = Storage::get($filePath);

		if ($file == null) {
			Log::error("FileManager : File with path [" . $filePath . "] does not exists.");
			return trans('document.errors.notExistsInDisk', ['name' => $filePath]);
		}

		return $file;
	}


	public function getUrl($filePath)
	{
		return Storage::url($filePath);
	}

	/**
	 * Delete File from disk
	 *
	 * @param $filePath
	 * @return bool
	 */

	public function delete($filePath)
	{
		Storage::delete($filePath);
		return true;
	}

	/**
	 *
	 * Check if the file with filename existe in databases
	 *
	 * @param $fileName
	 * @param string $criteria
	 * @return bool
	 */

	private function exists($fileName, $criteria = 'name')
	{
		$document = Document::where($criteria, $fileName)->first();
		return $document != null;
	}

}